module Logic where

-- products (conjunctions)
---------------------------

data And (A : Type) (B : Type) : Type where
  Conj of (_ : A) (_ : B)

proj1 : [A:Type] -> [B : Type] -> And A B -> A 
proj1 = \ [A] [B] p . case p of
  Conj x y -> x

proj2 : [A:Type] -> [B : Type] -> And A B -> B
proj2 = \ [A] [B] p . case p of
  Conj x y -> y

and_comm : [A : Type] -> [B : Type] -> And A B -> And B A
and_comm = \ [A] [B] anb . case anb of
  Conj x y -> Conj y x
            

and_assoc : [A : Type] -> [B : Type] -> [C : Type] -> And A (And B C) -> And (And A B) C
and_assoc = \ [A] [B] [C] assocp . case assocp of
  Conj x zy -> case zy of
    Conj z y -> PRINTME

-- if and only if
-----------------

iff : (A : Type) -> (B : Type) -> Type 
iff = \ A B . And (A -> B) (B -> A)

iff_implies : [A : Type] -> [B : Type] -> iff A B -> A -> B
iff_implies = TRUSTME

iff_sym : [A : Type] -> [B : Type] -> iff A B -> iff B A
iff_sym = TRUSTME

iff_refl : [A : Type] -> iff A A
iff_refl = TRUSTME

iff_trans : [A : Type] -> [B : Type] -> [C : Type] -> (iff A B) -> (iff B C) -> (iff A C)
iff_trans = TRUSTME 

-- Disjunction (Logical "or"), aka sums 
---------------------------------------

data Either (A : Type) (B : Type) : Type where
  Inl of (A)
  Inr of (B)

or_commut : [A : Type] -> [B : Type] -> Either A B -> Either B A
or_commut = TRUSTME

or_distributes_over_and_1 : [P:Type] -> [Q:Type] -> [R:Type] -> 
   Either P (And Q R) -> And (Either P Q) (Either P R)
or_distributes_over_and_1 = TRUSTME

or_assoc : [A : Type] -> [B : Type] -> [C : Type] -> Either A (Either B C) -> Either (Either A B) C
or_assoc = TRUSTME

-- Falsehood
------------

data Void : Type where {}   -- no constructors

-- aka ex_falso_quolibet
false_elim : [P:Type] -> Void -> P
false_elim = \ [P] v . case v of {}


-- Negation
-----------

neg : Type -> Type
neg = \ x . (x -> Void)

not_false : neg Void
not_false = \x. x

contradiction_implies_anything : [P:Type] -> [Q:Type] -> And P (neg P) -> Q 
contradiction_implies_anything = TRUSTME

double_neg : [P:Type] -> P -> neg (neg P)
double_neg = TRUSTME

contrapositive : [P:Type] -> [Q:Type] -> (P -> Q) -> neg Q -> neg P
contrapositive = TRUSTME

not_both_true_and_false : [P:Type] -> [Q:Type] -> neg (And P (neg P))
not_both_true_and_false = TRUSTME

iff_neg_false : [A : Type] -> iff (neg A) (iff A Void)
iff_neg_false = TRUSTME
                                  

